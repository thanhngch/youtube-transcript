#!/usr/bin/env bun
import { $ } from "bun";
import { existsSync } from "fs";
import { mkdir, rm, writeFile } from "fs/promises";
import path from "path";

interface TranscriptOptions {
  youtubeUrl: string;
  outputDir?: string;
  keepAudio?: boolean;
}

class YouTubeTranscriber {
  private tempDir: string = "./data/temp";
  
  constructor() {
    this.ensureTempDir();
  }

  private async ensureTempDir() {
    if (!existsSync(this.tempDir)) {
      await mkdir(this.tempDir, { recursive: true });
    }
  }

  /**
   * Download YouTube video v√† chuy·ªÉn ƒë·ªïi th√†nh MP3
   */
  private async downloadAndConvertToMp3(youtubeUrl: string): Promise<string> {
    console.log("üîÑ ƒêang download v√† chuy·ªÉn ƒë·ªïi video th√†nh MP3...");
    
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c temp t·ªìn t·∫°i
    await this.ensureTempDir();
    
    const outputTemplate = path.join(this.tempDir, "%(title)s.%(ext)s");
    
    try {
      // S·ª≠ d·ª•ng yt-dlp ƒë·ªÉ download v√† convert th√†nh mp3
      const result = await $`yt-dlp -x --audio-format mp3 --audio-quality 0 -o ${outputTemplate} ${youtubeUrl}`;
      
      if (result.exitCode !== 0) {
        console.error("‚ùå yt-dlp stderr:", result.stderr.toString());
        throw new Error(`yt-dlp failed with exit code ${result.exitCode}`);
      }
      
      // T√¨m t·∫•t c·∫£ file audio (kh√¥ng ch·ªâ mp3)
      let audioFiles: string[] = [];
      try {
        const mp3Files = await $`find ${this.tempDir} -name "*.mp3" 2>/dev/null || true`;
        const m4aFiles = await $`find ${this.tempDir} -name "*.m4a" 2>/dev/null || true`;
        const wavFiles = await $`find ${this.tempDir} -name "*.wav" 2>/dev/null || true`;
        
        audioFiles = [
          ...mp3Files.stdout.toString().trim().split('\n').filter(f => f && f.trim()),
          ...m4aFiles.stdout.toString().trim().split('\n').filter(f => f && f.trim()),
          ...wavFiles.stdout.toString().trim().split('\n').filter(f => f && f.trim())
        ];
      } catch (e) {
        console.error("L·ªói khi t√¨m audio files:", e);
      }
      
      if (audioFiles.length === 0) {
        throw new Error("Kh√¥ng t√¨m th·∫•y file audio sau khi download. Ki·ªÉm tra URL YouTube c√≥ h·ª£p l·ªá kh√¥ng.");
      }
      
      // L·∫•y file ƒë·∫ßu ti√™n v√† convert th√†nh MP3 n·∫øu c·∫ßn
      let audioFile = audioFiles[0];
      if (!audioFile) {
        throw new Error("Kh√¥ng t√¨m th·∫•y file audio sau khi download. Ki·ªÉm tra URL YouTube c√≥ h·ª£p l·ªá kh√¥ng.");
      }

      // N·∫øu file kh√¥ng ph·∫£i MP3, convert n√≥
      if (!audioFile.endsWith('.mp3')) {
        console.log("üîÑ ƒêang convert sang MP3...");
        const mp3File = audioFile.replace(/\.[^.]+$/, '.mp3');
        await $`ffmpeg -i ${audioFile} -acodec mp3 ${mp3File} -y`;
        
        // X√≥a file g·ªëc
        await $`rm ${audioFile}`;
        audioFile = mp3File;
      }
      
      console.log(`‚úÖ Download ho√†n th√†nh: ${path.basename(audioFile)}`);
      return audioFile;
      
    } catch (error) {
      console.error("‚ùå L·ªói khi download video:", error);
      throw error;
    }
  }

  /**
   * T·∫°o transcript t·ª´ file MP3 s·ª≠ d·ª•ng OpenAI Whisper API
   */
  private async transcribeWithOpenAI(mp3FilePath: string): Promise<string> {
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (!openaiApiKey) {
      throw new Error("C·∫ßn thi·∫øt l·∫≠p OPENAI_API_KEY environment variable");
    }

    console.log("üîÑ ƒêang s·ª≠ d·ª•ng OpenAI Whisper API...");
    
    try {
      const formData = new FormData();
      const audioFile = Bun.file(mp3FilePath);
      formData.append('file', audioFile);
      formData.append('model', 'gpt-4o-transcribe');
      formData.append('language', 'en');
      formData.append('response_format', 'text');

      const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
        },
        body: formData,
      });

      if (!response.ok) {
        // Handle specific error cases
        if (response.status === 401) {
          throw new Error(`‚ùå OPENAI_API_KEY kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra API key c·ªßa b·∫°n.`);
        }
        
        if (response.status === 400) {
          console.warn("‚ö†Ô∏è  Model gpt-4o-transcribe kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ fallback sang whisper-1...");
          return this.transcribeWithWhisperFallback(mp3FilePath);
        }
        
        throw new Error(`OpenAI API error: ${response.statusText} (${response.status})`);
      }

      // V·ªõi response_format='text', API tr·∫£ v·ªÅ string tr·ª±c ti·∫øp
      const transcript = await response.text();
      
      if (!transcript || transcript.trim() === '') {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c transcript t·ª´ OpenAI API");
      }
      
      console.log("‚úÖ Transcript ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");
      return transcript.trim();
    } catch (error) {
      console.error("‚ùå L·ªói khi s·ª≠ d·ª•ng OpenAI API:", error);
      throw error;
    }
  }

  /**
   * Fallback: s·ª≠ d·ª•ng whisper-1 model n·∫øu gpt-4o-transcribe kh√¥ng ho·∫°t ƒë·ªông
   */
  private async transcribeWithWhisperFallback(mp3FilePath: string): Promise<string> {
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (!openaiApiKey) {
      throw new Error("C·∫ßn thi·∫øt l·∫≠p OPENAI_API_KEY environment variable");
    }

    console.log("üîÑ ƒêang s·ª≠ d·ª•ng whisper-1 model...");
    
    try {
      const formData = new FormData();
      const audioFile = Bun.file(mp3FilePath);
      formData.append('file', audioFile);
      formData.append('model', 'whisper-1');
      formData.append('language', 'en');
      formData.append('response_format', 'text');

      const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
        },
        body: formData,
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error(`‚ùå OPENAI_API_KEY kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra API key c·ªßa b·∫°n.`);
        }
        throw new Error(`OpenAI API error with whisper-1: ${response.statusText} (${response.status})`);
      }

      // V·ªõi response_format='text', API tr·∫£ v·ªÅ string tr·ª±c ti·∫øp
      const transcript = await response.text();
      
      if (!transcript || transcript.trim() === '') {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c transcript t·ª´ OpenAI API (whisper-1)");
      }
      
      console.log("‚úÖ Transcript ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng (whisper-1)");
      return transcript.trim();
    } catch (error) {
      console.error("‚ùå L·ªói khi s·ª≠ d·ª•ng whisper-1 fallback:", error);
      throw error;
    }
  }

  /**
   * D·ªçn d·∫πp file t·∫°m
   */
  private async cleanup(keepAudio: boolean = false) {
    if (!keepAudio) {
      try {
        await rm(this.tempDir, { recursive: true, force: true });
        console.log("üóëÔ∏è  ƒê√£ d·ªçn d·∫πp file t·∫°m");
      } catch (error) {
        console.warn("‚ö†Ô∏è  Kh√¥ng th·ªÉ d·ªçn d·∫πp file t·∫°m:", error);
      }
    }
  }

  /**
   * H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω YouTube URL th√†nh transcript
   */
  async processYouTubeUrl(options: TranscriptOptions): Promise<void> {
    const { youtubeUrl, outputDir = "./data", keepAudio = false } = options;
    
    try {
      // Validate YouTube URL
      const urlPattern = /^https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)/;
      if (!urlPattern.test(youtubeUrl)) {
        throw new Error("URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p YouTube URL ƒë√∫ng ƒë·ªãnh d·∫°ng.");
      }

      console.log(`üé¨ ƒêang x·ª≠ l√Ω: ${youtubeUrl}`);
      
      // B∆∞·ªõc 1: Download v√† chuy·ªÉn ƒë·ªïi th√†nh MP3
      const mp3File = await this.downloadAndConvertToMp3(youtubeUrl);
      
      // B∆∞·ªõc 2: T·∫°o transcript b·∫±ng OpenAI Whisper API
      const transcript = await this.transcribeWithOpenAI(mp3File);
      
      // B∆∞·ªõc 3: ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i
      if (!existsSync(outputDir)) {
        await mkdir(outputDir, { recursive: true });
        console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${outputDir}`);
      }
      
      // B∆∞·ªõc 4: Ghi transcript ra file
      const outputFileName = `transcript_${Date.now()}.txt`;
      const outputPath = path.join(outputDir, outputFileName);
      
      await writeFile(outputPath, transcript, 'utf-8');
      console.log(`üìù Transcript ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: ${outputPath}`);
      
      // B∆∞·ªõc 5: D·ªçn d·∫πp
      await this.cleanup(keepAudio);
      
      console.log("‚úÖ Ho√†n th√†nh!");
      
    } catch (error) {
      console.error("‚ùå C√≥ l·ªói x·∫£y ra:", error);
      await this.cleanup();
      process.exit(1);
    }
  }
}

// Main function
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
üì∫ YouTube Transcript Generator

S·ª≠ d·ª•ng:
  bun run index.ts <youtube-url> [options]

V√≠ d·ª•:
  bun run index.ts "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
  bun run index.ts "https://youtu.be/dQw4w9WgXcQ" --keep-audio
  bun run index.ts "https://www.youtube.com/watch?v=dQw4w9WgXcQ" --output ./transcripts

Options:
  --keep-audio    Gi·ªØ l·∫°i file MP3 sau khi x·ª≠ l√Ω
  --output <dir>  Th∆∞ m·ª•c ƒë·ªÉ l∆∞u transcript (m·∫∑c ƒë·ªãnh: ./data)

Y√™u c·∫ßu:
  - yt-dlp (ƒë√£ c√†i ƒë·∫∑t)
  - ffmpeg (ƒë√£ c√†i ƒë·∫∑t)  
  - OPENAI_API_KEY (environment variable)
`);
    process.exit(1);
  }

  const youtubeUrl = args[0];
  if (!youtubeUrl) {
    throw new Error("URL kh√¥ng h·ª£p l·ªá");
  }
  const keepAudio = args.includes('--keep-audio');
  
  let outputDir = "./data";
  const outputIndex = args.findIndex(arg => arg === '--output');
  if (outputIndex !== -1 && args[outputIndex + 1]) {
    if (!args[outputIndex + 1]) {
      throw new Error("Th∆∞ m·ª•c output kh√¥ng h·ª£p l·ªá");
    }
    outputDir = args[outputIndex + 1] || "./data";
  }

  const transcriber = new YouTubeTranscriber();
  await transcriber.processYouTubeUrl({
    youtubeUrl,
    outputDir,
    keepAudio
  });
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
if (import.meta.main) {
  main().catch(console.error);
}
